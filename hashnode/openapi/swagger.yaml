openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /tag:
    get:
      operationId: TagController_findAllTags
      parameters: []
      responses:
        '200':
          description: ''
  /users:
    post:
      operationId: UserController_createUser
      parameters: []
      responses:
        '201':
          description: ''
      security: &ref_0
        - JWT-auth: []
  /user:
    put:
      operationId: UserController_updateUser
      parameters: []
      responses:
        '200':
          description: ''
      security: *ref_0
    get:
      operationId: UserController_currentUser
      parameters: []
      responses:
        '200':
          description: ''
      security: *ref_0
  /users/login:
    post:
      operationId: UserController_loginUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '201':
          description: ''
      security: *ref_0
  /articles:
    get:
      operationId: ArticleController_getAllArticle
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: ArticleController_createArticle
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleDto'
      responses:
        '201':
          description: ''
      security:
        - token: []
  /articles/{slug}:
    get:
      operationId: ArticleController_getArticle
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    delete:
      operationId: ArticleController_deleteArticle
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: ArticleController_updateArticle
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /articles/{slug}/favorite:
    post:
      operationId: ArticleController_articleToFavorites
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
    delete:
      operationId: ArticleController_deleteArticleFromFavorites
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /profiles/{username}:
    get:
      operationId: ProfileController_getProfile
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /profiles/{username}/follow:
    post:
      operationId: ProfileController_followProfile
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
info:
  title: hashnode Service
  description: Hashnode Service Documentation
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    token:
      scheme: Bearer
      bearerFormat: JWT
      type: http
      in: header
      name: Authorization
  schemas:
    UserCredentialsDto:
      type: object
      properties:
        email:
          type: string
          example: xyz@gmail.com
        password:
          type: string
          example: xyz@63
      required:
        - email
        - password
    LoginUserDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCredentialsDto'
      required:
        - user
    CreateArticleDto:
      type: object
      properties:
        title:
          type: string
          example: Title of blog
        description:
          type: string
          example: Shot description of blog
        body:
          type: string
          example: Detail about the blog
        tagList:
          type: string
          example:
            - blogTag1
      required:
        - title
        - description
        - body
        - tagList
    ArticleDto:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/CreateArticleDto'
      required:
        - article
